%{
open System
open Ast
open Util
open Util.Format
open Microsoft.FSharp.Collections
open Microsoft.FSharp.Text.Lexing

type LineInfo = Position * Position

let pos ((p1, p2): LineInfo) : Ast.Position =
    {SLine = p1.Line; 
     SCol = p1.Column;
     ELine = p2.Line;
     ECol = p2.Column}

let range (p1: Ast.Position) (p2: Ast.Position) : Ast.Position =
    {SLine = p1.SLine; 
     SCol = p1.SCol;
     ELine = p2.ELine;
     ECol = p2.ECol}

let ident x : Ast.Ident = 
    {Pos = pos (fst x);
     Name = snd x}

let idToExpr (id: Ast.Ident) : Ast.Expr = 
    {Pos = id.Pos; Node = Ast.Ident (id, [])}

let idsToExpr (ids: Ast.Ident list) : Ast.Node =
    let e = 
        List.map idToExpr ids
        |> List.fold1 (fun e1 e2 -> {Pos = range e1.Pos e2.Pos; Node = Ast.LOrExpr(e1,e2)})
    e.Node

let buildDefinitions defs : Ast.Definitions = 
    List.fold (fun acc (name, x) -> 
        match Map.tryFind name acc with
        | None -> Map.add name x acc
        | Some _ -> error (sprintf "Duplicate definition of %s" name)
    ) Map.empty defs
%}


%start start
%type <Ast.Definitions * Ast.ControlConstraints> start

%token <LineInfo> TRUE
%token <LineInfo> FALSE
%token <LineInfo> WILDCARD
%token <LineInfo * string> ID
%token <LineInfo * int32> INT
%token <LineInfo * int32> ASN

%token <LineInfo> NOT 
%token <LineInfo> DIFFERENCE
%token <LineInfo> SHR 
%token <LineInfo> AND 
%token <LineInfo> OR
%token <LineInfo> LAND
%token <LineInfo> LOR

%token <LineInfo> DEFINE
%token <LineInfo> CONTROL

%token <LineInfo> EQUAL
%token <LineInfo> LPAREN 
%token <LineInfo> RPAREN 
%token <LineInfo> LBRACKET 
%token <LineInfo> RBRACKET 
%token <LineInfo> LBRACE 
%token <LineInfo> RBRACE 
%token <LineInfo> COMMA 
%token <LineInfo> SLASH
%token <LineInfo> COLON 
%token <LineInfo> RARROW 
%token <LineInfo> ROCKET 
%token <LineInfo> DOT
%token <LineInfo> DOLLAR

%token EOF


%nonassoc EQUALS
%left RARROW
%left SHR
%left DIFFERENCE
%left OR LOR
%left AND LAND
%right NOT

%%

start: 
	| definitions EOF                            { (buildDefinitions $1, []) }
	| definitions control EOF                    { (buildDefinitions $1, $2) }

control:
	| CONTROL LBRACE RBRACE                      { [] }
    | CONTROL LBRACE cconstrs RBRACE             { $3 }

pconstrs: 
    | pconstr                                    { [$1] }
	| pconstr COMMA                              { [$1] }
    | pconstr COMMA pconstrs                     { $1 :: $3 } 

pconstr:
    | expr ROCKET expr                           { ($1, $3) }

cconstrs:
    | cconstr                                    { [$1] }
	| cconstr COMMA                              { [$1] }
    | cconstr COMMA cconstrs                     { $1 :: $3 }

cconstr:
    | ID                                         { (ident $1, []) }
    | ID LPAREN exprs RPAREN                     { (ident $1, $3) }

exprs:
    | expr                                       { [$1] }
    | expr COMMA exprs                           { $1 :: $3 }

expr:
	| ID									     { {Pos = pos (fst $1); Node = Ast.Ident (ident $1, [])} }
	| ID LPAREN exprs RPAREN                     { {Pos = range (pos (fst $1)) (pos $4); Node = Ast.Ident (ident $1, $3)} }
	| DOLLAR ID DOLLAR                           { let tv = {Pos = range (pos $1) (pos $3); Name = snd $2} in
                                                   {Pos = range (pos $1) (pos $3); Node = Ast.TemplateVar (None, tv) } }
	| ID DOT DOLLAR ID DOLLAR                    { let tv = {Pos = range (pos $3) (pos $5); Name = snd $4} in
                                                   {Pos = range (pos (fst $1)) (pos $5); Node = Ast.TemplateVar (Some (ident $1), tv) } }
    | expr AND expr                              { {Pos = range $1.Pos $3.Pos; Node = Ast.AndExpr ($1, $3)} }
    | expr OR expr                               { {Pos = range $1.Pos $3.Pos; Node = Ast.OrExpr ($1, $3)} }
    | expr LAND expr                             { {Pos = range $1.Pos $3.Pos; Node = Ast.LAndExpr ($1, $3)} }
    | expr LOR expr                              { {Pos = range $1.Pos $3.Pos; Node = Ast.LOrExpr ($1, $3)} }
    | expr DIFFERENCE expr                       { {Pos = range $1.Pos $3.Pos; Node = Ast.DiffExpr ($1, $3)} }
	| expr SHR expr					             { {Pos = range $1.Pos $3.Pos; Node = Ast.ShrExpr ($1, $3)} }
    | NOT expr                                   { {Pos = range (pos $1) $2.Pos; Node = Ast.NotExpr $2} }
    | LPAREN expr RPAREN                         { {Pos = range (pos $1) (pos $3); Node = $2.Node} }
	| expr RARROW expr                           { {Pos = range $1.Pos $3.Pos; Node = Ast.LinkExpr ($1, $3)} }
    | INT DOT INT DOT INT DOT INT                { {Pos = range (pos (fst $1)) (pos (fst $7)); Node = Ast.PrefixLiteral (snd $1, snd $3, snd $5, snd $7, None)} }
    | INT DOT INT DOT INT DOT INT SLASH INT      { {Pos = range (pos (fst $1)) (pos (fst $9)); Node = Ast.PrefixLiteral (snd $1, snd $3, snd $5, snd $7, Some (snd $9, -1))} }
    | INT DOT INT DOT INT DOT INT SLASH LBRACKET INT DOT DOT INT RBRACKET
                                                 { {Pos = range (pos (fst $1)) (pos $14); Node = Ast.PrefixLiteral (snd $1, snd $3, snd $5, snd $7, Some (snd $10, snd $13))} }
	| INT COLON INT						         { {Pos = range (pos (fst $1)) (pos (fst $3)); Node = Ast.CommunityLiteral (snd $1, snd $3)} }
	| INT                                        { {Pos = pos (fst $1); Node = Ast.IntLiteral (snd $1)} }
    | ASN                                        { {Pos = pos (fst $1); Node = Ast.Asn (snd $1)} }
    | WILDCARD                                   { {Pos = pos $1; Node = Ast.Wildcard} }
    | TRUE                                       { {Pos = pos $1; Node = Ast.True} } 
    | FALSE                                      { {Pos = pos $1; Node = Ast.False} }
	| LBRACE RBRACE	                             { {Pos = range (pos $1) (pos $2); Node = Ast.BlockExpr []} }
	| LBRACE pconstrs RBRACE                     { {Pos = range (pos $1) (pos $3); Node = Ast.BlockExpr $2} }
	| LBRACE ids RBRACE                          { {Pos = range (pos $1) (pos $3); Node = idsToExpr $2 } }

ids:
	| ID                                         { [ident $1] }
	| ID COMMA ids                               { (ident $1) :: $3 }

definitions:
    | definition                                 { [$1] }
    | definition definitions                     { $1 :: $2 }

definition:
    | DEFINE ID EQUAL expr	                     { (snd $2, (pos (fst $2), [], $4)) }
    | DEFINE ID LPAREN ids RPAREN EQUAL expr     { (snd $2, (pos (fst $2), $4, $7)) }