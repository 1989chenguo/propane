// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Ast
open Util
open Util.Format
open Microsoft.FSharp.Collections
open Microsoft.FSharp.Text.Lexing

type LineInfo = Position * Position

let pos ((p1, p2): LineInfo) : Ast.Position =
    {SLine = p1.Line; 
     SCol = p1.Column;
     ELine = p2.Line;
     ECol = p2.Column}

let range (p1: Ast.Position) (p2: Ast.Position) : Ast.Position =
    {SLine = p1.SLine; 
     SCol = p1.SCol;
     ELine = p2.ELine;
     ECol = p2.ECol}

let ident x : Ast.Ident = 
    {Pos = pos (fst x);
     Name = snd x}

let idToExpr (id: Ast.Ident) : Ast.Expr = 
    {Pos = id.Pos; Node = Ast.Ident (id, [])}

let idsToExpr (ids: Ast.Ident list) : Ast.Node =
    let e = 
        List.map idToExpr ids
        |> List.fold1 (fun e1 e2 -> {Pos = range e1.Pos e2.Pos; Node = Ast.LOrExpr(e1,e2)})
    e.Node

let buildDefinitions defs : Ast.Definitions = 
    List.fold (fun acc (name, x) -> 
        match Map.tryFind name acc with
        | None -> Map.add name x acc
        | Some _ -> error (sprintf "Duplicate definition of %s" name)
    ) Map.empty defs

# 49 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DOLLAR of (LineInfo)
  | DOT of (LineInfo)
  | ROCKET of (LineInfo)
  | RARROW of (LineInfo)
  | COLON of (LineInfo)
  | SLASH of (LineInfo)
  | COMMA of (LineInfo)
  | RBRACE of (LineInfo)
  | LBRACE of (LineInfo)
  | RBRACKET of (LineInfo)
  | LBRACKET of (LineInfo)
  | RPAREN of (LineInfo)
  | LPAREN of (LineInfo)
  | EQUAL of (LineInfo)
  | CONTROL of (LineInfo)
  | DEFINE of (LineInfo)
  | LOR of (LineInfo)
  | LAND of (LineInfo)
  | OR of (LineInfo)
  | AND of (LineInfo)
  | SHR of (LineInfo)
  | DIFFERENCE of (LineInfo)
  | NOT of (LineInfo)
  | ASN of (LineInfo * int32)
  | INT of (LineInfo * int32)
  | ID of (LineInfo * string)
  | WILDCARD of (LineInfo)
  | FALSE of (LineInfo)
  | TRUE of (LineInfo)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOLLAR
    | TOKEN_DOT
    | TOKEN_ROCKET
    | TOKEN_RARROW
    | TOKEN_COLON
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_RBRACE
    | TOKEN_LBRACE
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_EQUAL
    | TOKEN_CONTROL
    | TOKEN_DEFINE
    | TOKEN_LOR
    | TOKEN_LAND
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_SHR
    | TOKEN_DIFFERENCE
    | TOKEN_NOT
    | TOKEN_ASN
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_WILDCARD
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_control
    | NONTERM_pconstrs
    | NONTERM_pconstr
    | NONTERM_cconstrs
    | NONTERM_cconstr
    | NONTERM_exprs
    | NONTERM_expr
    | NONTERM_ids
    | NONTERM_definitions
    | NONTERM_definition

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DOLLAR _ -> 1 
  | DOT _ -> 2 
  | ROCKET _ -> 3 
  | RARROW _ -> 4 
  | COLON _ -> 5 
  | SLASH _ -> 6 
  | COMMA _ -> 7 
  | RBRACE _ -> 8 
  | LBRACE _ -> 9 
  | RBRACKET _ -> 10 
  | LBRACKET _ -> 11 
  | RPAREN _ -> 12 
  | LPAREN _ -> 13 
  | EQUAL _ -> 14 
  | CONTROL _ -> 15 
  | DEFINE _ -> 16 
  | LOR _ -> 17 
  | LAND _ -> 18 
  | OR _ -> 19 
  | AND _ -> 20 
  | SHR _ -> 21 
  | DIFFERENCE _ -> 22 
  | NOT _ -> 23 
  | ASN _ -> 24 
  | INT _ -> 25 
  | ID _ -> 26 
  | WILDCARD _ -> 27 
  | FALSE _ -> 28 
  | TRUE _ -> 29 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DOLLAR 
  | 2 -> TOKEN_DOT 
  | 3 -> TOKEN_ROCKET 
  | 4 -> TOKEN_RARROW 
  | 5 -> TOKEN_COLON 
  | 6 -> TOKEN_SLASH 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_RBRACE 
  | 9 -> TOKEN_LBRACE 
  | 10 -> TOKEN_RBRACKET 
  | 11 -> TOKEN_LBRACKET 
  | 12 -> TOKEN_RPAREN 
  | 13 -> TOKEN_LPAREN 
  | 14 -> TOKEN_EQUAL 
  | 15 -> TOKEN_CONTROL 
  | 16 -> TOKEN_DEFINE 
  | 17 -> TOKEN_LOR 
  | 18 -> TOKEN_LAND 
  | 19 -> TOKEN_OR 
  | 20 -> TOKEN_AND 
  | 21 -> TOKEN_SHR 
  | 22 -> TOKEN_DIFFERENCE 
  | 23 -> TOKEN_NOT 
  | 24 -> TOKEN_ASN 
  | 25 -> TOKEN_INT 
  | 26 -> TOKEN_ID 
  | 27 -> TOKEN_WILDCARD 
  | 28 -> TOKEN_FALSE 
  | 29 -> TOKEN_TRUE 
  | 32 -> TOKEN_end_of_input
  | 30 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_control 
    | 4 -> NONTERM_control 
    | 5 -> NONTERM_pconstrs 
    | 6 -> NONTERM_pconstrs 
    | 7 -> NONTERM_pconstrs 
    | 8 -> NONTERM_pconstr 
    | 9 -> NONTERM_cconstrs 
    | 10 -> NONTERM_cconstrs 
    | 11 -> NONTERM_cconstrs 
    | 12 -> NONTERM_cconstr 
    | 13 -> NONTERM_cconstr 
    | 14 -> NONTERM_exprs 
    | 15 -> NONTERM_exprs 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_expr 
    | 19 -> NONTERM_expr 
    | 20 -> NONTERM_expr 
    | 21 -> NONTERM_expr 
    | 22 -> NONTERM_expr 
    | 23 -> NONTERM_expr 
    | 24 -> NONTERM_expr 
    | 25 -> NONTERM_expr 
    | 26 -> NONTERM_expr 
    | 27 -> NONTERM_expr 
    | 28 -> NONTERM_expr 
    | 29 -> NONTERM_expr 
    | 30 -> NONTERM_expr 
    | 31 -> NONTERM_expr 
    | 32 -> NONTERM_expr 
    | 33 -> NONTERM_expr 
    | 34 -> NONTERM_expr 
    | 35 -> NONTERM_expr 
    | 36 -> NONTERM_expr 
    | 37 -> NONTERM_expr 
    | 38 -> NONTERM_expr 
    | 39 -> NONTERM_expr 
    | 40 -> NONTERM_expr 
    | 41 -> NONTERM_ids 
    | 42 -> NONTERM_ids 
    | 43 -> NONTERM_definitions 
    | 44 -> NONTERM_definitions 
    | 45 -> NONTERM_definition 
    | 46 -> NONTERM_definition 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 32 
let _fsyacc_tagOfErrorTerminal = 30

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DOLLAR _ -> "DOLLAR" 
  | DOT _ -> "DOT" 
  | ROCKET _ -> "ROCKET" 
  | RARROW _ -> "RARROW" 
  | COLON _ -> "COLON" 
  | SLASH _ -> "SLASH" 
  | COMMA _ -> "COMMA" 
  | RBRACE _ -> "RBRACE" 
  | LBRACE _ -> "LBRACE" 
  | RBRACKET _ -> "RBRACKET" 
  | LBRACKET _ -> "LBRACKET" 
  | RPAREN _ -> "RPAREN" 
  | LPAREN _ -> "LPAREN" 
  | EQUAL _ -> "EQUAL" 
  | CONTROL _ -> "CONTROL" 
  | DEFINE _ -> "DEFINE" 
  | LOR _ -> "LOR" 
  | LAND _ -> "LAND" 
  | OR _ -> "OR" 
  | AND _ -> "AND" 
  | SHR _ -> "SHR" 
  | DIFFERENCE _ -> "DIFFERENCE" 
  | NOT _ -> "NOT" 
  | ASN _ -> "ASN" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 
  | WILDCARD _ -> "WILDCARD" 
  | FALSE _ -> "FALSE" 
  | TRUE _ -> "TRUE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DOLLAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ROCKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SLASH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RBRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CONTROL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DEFINE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LAND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SHR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIFFERENCE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ASN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WILDCARD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 2us; 4us; 2us; 65535us; 12us; 13us; 81us; 83us; 2us; 65535us; 12us; 11us; 81us; 11us; 2us; 65535us; 7us; 9us; 18us; 19us; 2us; 65535us; 7us; 17us; 18us; 17us; 3us; 65535us; 21us; 22us; 25us; 26us; 29us; 30us; 17us; 65535us; 12us; 14us; 15us; 16us; 21us; 24us; 25us; 24us; 29us; 24us; 50us; 39us; 51us; 40us; 52us; 41us; 53us; 42us; 54us; 43us; 55us; 44us; 56us; 45us; 57us; 46us; 59us; 47us; 81us; 14us; 94us; 48us; 98us; 49us; 3us; 65535us; 81us; 85us; 88us; 89us; 95us; 96us; 2us; 65535us; 0us; 2us; 90us; 91us; 2us; 65535us; 0us; 90us; 90us; 90us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 14us; 17us; 21us; 39us; 43us; 46us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 2us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 2us; 3us; 4us; 1us; 3us; 1us; 4us; 1us; 4us; 3us; 5us; 6us; 7us; 2us; 6us; 7us; 1us; 7us; 8us; 8us; 20us; 21us; 22us; 23us; 24us; 25us; 28us; 1us; 8us; 8us; 8us; 20us; 21us; 22us; 23us; 24us; 25us; 28us; 3us; 9us; 10us; 11us; 2us; 10us; 11us; 1us; 11us; 2us; 12us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 9us; 14us; 15us; 20us; 21us; 22us; 23us; 24us; 25us; 28us; 1us; 15us; 1us; 15us; 3us; 16us; 17us; 19us; 5us; 16us; 17us; 19us; 41us; 42us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 8us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 28us; 8us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 28us; 8us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 28us; 8us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 28us; 8us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 28us; 8us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 28us; 8us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 28us; 8us; 20us; 21us; 22us; 23us; 24us; 25us; 27us; 28us; 8us; 20us; 21us; 22us; 23us; 24us; 25us; 28us; 28us; 8us; 20us; 21us; 22us; 23us; 24us; 25us; 28us; 45us; 8us; 20us; 21us; 22us; 23us; 24us; 25us; 28us; 46us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 28us; 5us; 29us; 30us; 31us; 32us; 33us; 3us; 29us; 30us; 31us; 3us; 29us; 30us; 31us; 3us; 29us; 30us; 31us; 3us; 29us; 30us; 31us; 3us; 29us; 30us; 31us; 3us; 29us; 30us; 31us; 2us; 30us; 31us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 3us; 38us; 39us; 40us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 40us; 2us; 41us; 42us; 1us; 42us; 1us; 42us; 2us; 43us; 44us; 1us; 44us; 2us; 45us; 46us; 2us; 45us; 46us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 46us; 1us; 46us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 16us; 19us; 21us; 23us; 25us; 29us; 32us; 34us; 43us; 45us; 54us; 58us; 61us; 63us; 66us; 68us; 70us; 72us; 82us; 84us; 86us; 90us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 125us; 134us; 143us; 152us; 161us; 170us; 179us; 188us; 197us; 206us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 241us; 245us; 249us; 253us; 257us; 261us; 265us; 268us; 270us; 272us; 274us; 276us; 278us; 280us; 282us; 284us; 286us; 288us; 290us; 292us; 294us; 298us; 300us; 302us; 304us; 306us; 308us; 311us; 313us; 315us; 318us; 320us; 323us; 326us; 328us; 330us; 332us; 334us; |]
let _fsyacc_action_rows = 99
let _fsyacc_actionTableElements = [|1us; 32768us; 16us; 92us; 0us; 49152us; 2us; 32768us; 0us; 3us; 15us; 6us; 0us; 16385us; 1us; 32768us; 0us; 5us; 0us; 16386us; 1us; 32768us; 9us; 7us; 2us; 32768us; 8us; 8us; 26us; 20us; 0us; 16387us; 1us; 32768us; 8us; 10us; 0us; 16388us; 1us; 16389us; 7us; 12us; 10us; 16390us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 0us; 16391us; 8us; 32768us; 3us; 15us; 4us; 59us; 17us; 53us; 18us; 52us; 19us; 51us; 20us; 50us; 21us; 55us; 22us; 54us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 7us; 16392us; 4us; 59us; 17us; 53us; 18us; 52us; 19us; 51us; 20us; 50us; 21us; 55us; 22us; 54us; 1us; 16393us; 7us; 18us; 1us; 16394us; 26us; 20us; 0us; 16395us; 1us; 16396us; 13us; 21us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 1us; 32768us; 12us; 23us; 0us; 16397us; 8us; 16398us; 4us; 59us; 7us; 25us; 17us; 53us; 18us; 52us; 19us; 51us; 20us; 50us; 21us; 55us; 22us; 54us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 0us; 16399us; 2us; 16400us; 2us; 35us; 13us; 29us; 4us; 16400us; 2us; 35us; 7us; 88us; 8us; 16425us; 13us; 29us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 1us; 32768us; 12us; 31us; 0us; 16401us; 1us; 32768us; 26us; 33us; 1us; 32768us; 1us; 34us; 0us; 16402us; 1us; 32768us; 1us; 36us; 1us; 32768us; 26us; 37us; 1us; 32768us; 1us; 38us; 0us; 16403us; 0us; 16404us; 2us; 16405us; 18us; 52us; 20us; 50us; 0us; 16406us; 2us; 16407us; 18us; 52us; 20us; 50us; 4us; 16408us; 17us; 53us; 18us; 52us; 19us; 51us; 20us; 50us; 5us; 16409us; 17us; 53us; 18us; 52us; 19us; 51us; 20us; 50us; 22us; 54us; 0us; 16410us; 8us; 32768us; 4us; 59us; 12us; 58us; 17us; 53us; 18us; 52us; 19us; 51us; 20us; 50us; 21us; 55us; 22us; 54us; 6us; 16412us; 17us; 53us; 18us; 52us; 19us; 51us; 20us; 50us; 21us; 55us; 22us; 54us; 7us; 16429us; 4us; 59us; 17us; 53us; 18us; 52us; 19us; 51us; 20us; 50us; 21us; 55us; 22us; 54us; 7us; 16430us; 4us; 59us; 17us; 53us; 18us; 52us; 19us; 51us; 20us; 50us; 21us; 55us; 22us; 54us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 0us; 16411us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 2us; 16417us; 2us; 61us; 5us; 75us; 1us; 32768us; 25us; 62us; 1us; 32768us; 2us; 63us; 1us; 32768us; 25us; 64us; 1us; 32768us; 2us; 65us; 1us; 32768us; 25us; 66us; 1us; 16413us; 6us; 67us; 2us; 32768us; 11us; 69us; 25us; 68us; 0us; 16414us; 1us; 32768us; 25us; 70us; 1us; 32768us; 2us; 71us; 1us; 32768us; 2us; 72us; 1us; 32768us; 25us; 73us; 1us; 32768us; 10us; 74us; 0us; 16415us; 1us; 32768us; 25us; 76us; 0us; 16416us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 11us; 32768us; 1us; 32us; 8us; 82us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 28us; 27us; 78us; 28us; 80us; 29us; 79us; 0us; 16422us; 1us; 32768us; 8us; 84us; 0us; 16423us; 1us; 32768us; 8us; 86us; 0us; 16424us; 1us; 16425us; 7us; 88us; 1us; 32768us; 26us; 87us; 0us; 16426us; 1us; 16427us; 16us; 92us; 0us; 16428us; 1us; 32768us; 26us; 93us; 2us; 32768us; 13us; 95us; 14us; 94us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; 1us; 32768us; 26us; 87us; 1us; 32768us; 12us; 97us; 1us; 32768us; 14us; 98us; 10us; 32768us; 1us; 32us; 9us; 81us; 13us; 57us; 23us; 56us; 24us; 77us; 25us; 60us; 26us; 27us; 27us; 78us; 28us; 80us; 29us; 79us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 6us; 7us; 9us; 10us; 12us; 15us; 16us; 18us; 19us; 21us; 32us; 33us; 42us; 53us; 61us; 63us; 65us; 66us; 68us; 79us; 81us; 82us; 91us; 102us; 103us; 106us; 111us; 122us; 124us; 125us; 127us; 129us; 130us; 132us; 134us; 136us; 137us; 138us; 141us; 142us; 145us; 150us; 156us; 157us; 166us; 173us; 181us; 189us; 200us; 211us; 222us; 233us; 244us; 255us; 266us; 277us; 278us; 289us; 292us; 294us; 296us; 298us; 300us; 302us; 304us; 307us; 308us; 310us; 312us; 314us; 316us; 318us; 319us; 321us; 322us; 323us; 324us; 325us; 326us; 338us; 339us; 341us; 342us; 344us; 345us; 347us; 349us; 350us; 352us; 353us; 355us; 358us; 369us; 371us; 373us; 375us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 4us; 1us; 2us; 3us; 3us; 1us; 2us; 3us; 1us; 4us; 1us; 3us; 1us; 4us; 3us; 5us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 7us; 9us; 14us; 3us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 3us; 1us; 3us; 1us; 2us; 4us; 7us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 65535us; 65535us; 16387us; 65535us; 16388us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 16416us; 16418us; 16419us; 16420us; 16421us; 65535us; 16422us; 65535us; 16423us; 65535us; 16424us; 65535us; 65535us; 16426us; 65535us; 16428us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 335 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.Definitions * Ast.ControlConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 344 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definitions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                                     (buildDefinitions _1, []) 
                   )
# 95 "Parser.fsy"
                 : Ast.Definitions * Ast.ControlConstraints));
# 355 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definitions)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'control)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                                     (buildDefinitions _1, _2) 
                   )
# 96 "Parser.fsy"
                 : Ast.Definitions * Ast.ControlConstraints));
# 367 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                                     [] 
                   )
# 99 "Parser.fsy"
                 : 'control));
# 380 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstrs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                                        _3 
                   )
# 100 "Parser.fsy"
                 : 'control));
# 394 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                                        [_1] 
                   )
# 103 "Parser.fsy"
                 : 'pconstrs));
# 405 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                                     [_1] 
                   )
# 104 "Parser.fsy"
                 : 'pconstrs));
# 417 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                                        _1 :: _3 
                   )
# 105 "Parser.fsy"
                 : 'pconstrs));
# 430 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                                        (_1, _3) 
                   )
# 108 "Parser.fsy"
                 : 'pconstr));
# 443 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                                        [_1] 
                   )
# 111 "Parser.fsy"
                 : 'cconstrs));
# 454 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                                     [_1] 
                   )
# 112 "Parser.fsy"
                 : 'cconstrs));
# 466 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                                        _1 :: _3 
                   )
# 113 "Parser.fsy"
                 : 'cconstrs));
# 479 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                                        (ident _1, []) 
                   )
# 116 "Parser.fsy"
                 : 'cconstr));
# 490 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                                        (ident _1, _3) 
                   )
# 117 "Parser.fsy"
                 : 'cconstr));
# 504 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                        [_1] 
                   )
# 120 "Parser.fsy"
                 : 'exprs));
# 515 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                        _1 :: _3 
                   )
# 121 "Parser.fsy"
                 : 'exprs));
# 528 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                          {Pos = pos (fst _1); Node = Ast.Ident (ident _1, [])} 
                   )
# 124 "Parser.fsy"
                 : 'expr));
# 539 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                                     {Pos = range (pos (fst _1)) (pos _4); Node = Ast.Ident (ident _1, _3)} 
                   )
# 125 "Parser.fsy"
                 : 'expr));
# 553 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                     let tv = {Pos = range (pos _1) (pos _3); Name = snd _2} in
                                                                        {Pos = range (pos _1) (pos _3); Node = Ast.TemplateVar (None, tv) } 
                   )
# 126 "Parser.fsy"
                 : 'expr));
# 567 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                                                     let tv = {Pos = range (pos _3) (pos _5); Name = snd _4} in
                                                                        {Pos = range (pos (fst _1)) (pos _5); Node = Ast.TemplateVar (Some (ident _1), tv) } 
                   )
# 128 "Parser.fsy"
                 : 'expr));
# 583 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                                        {Pos = range _1.Pos _3.Pos; Node = Ast.AndExpr (_1, _3)} 
                   )
# 130 "Parser.fsy"
                 : 'expr));
# 596 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                                        {Pos = range _1.Pos _3.Pos; Node = Ast.OrExpr (_1, _3)} 
                   )
# 131 "Parser.fsy"
                 : 'expr));
# 609 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                                        {Pos = range _1.Pos _3.Pos; Node = Ast.LAndExpr (_1, _3)} 
                   )
# 132 "Parser.fsy"
                 : 'expr));
# 622 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                                        {Pos = range _1.Pos _3.Pos; Node = Ast.LOrExpr (_1, _3)} 
                   )
# 133 "Parser.fsy"
                 : 'expr));
# 635 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                                        {Pos = range _1.Pos _3.Pos; Node = Ast.DiffExpr (_1, _3)} 
                   )
# 134 "Parser.fsy"
                 : 'expr));
# 648 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                         {Pos = range _1.Pos _3.Pos; Node = Ast.ShrExpr (_1, _3)} 
                   )
# 135 "Parser.fsy"
                 : 'expr));
# 661 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                                        {Pos = range (pos _1) _2.Pos; Node = Ast.NotExpr _2} 
                   )
# 136 "Parser.fsy"
                 : 'expr));
# 673 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                                        {Pos = range (pos _1) (pos _3); Node = _2.Node} 
                   )
# 137 "Parser.fsy"
                 : 'expr));
# 686 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                                     {Pos = range _1.Pos _3.Pos; Node = Ast.LinkExpr (_1, _3)} 
                   )
# 138 "Parser.fsy"
                 : 'expr));
# 699 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                                        {Pos = range (pos (fst _1)) (pos (fst _7)); Node = Ast.PrefixLiteral (snd _1, snd _3, snd _5, snd _7, None)} 
                   )
# 139 "Parser.fsy"
                 : 'expr));
# 716 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                        {Pos = range (pos (fst _1)) (pos (fst _9)); Node = Ast.PrefixLiteral (snd _1, snd _3, snd _5, snd _7, Some (snd _9, -1))} 
                   )
# 140 "Parser.fsy"
                 : 'expr));
# 735 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                                        {Pos = range (pos (fst _1)) (pos _14); Node = Ast.PrefixLiteral (snd _1, snd _3, snd _5, snd _7, Some (snd _10, snd _13))} 
                   )
# 142 "Parser.fsy"
                 : 'expr));
# 759 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                      {Pos = range (pos (fst _1)) (pos (fst _3)); Node = Ast.CommunityLiteral (snd _1, snd _3)} 
                   )
# 143 "Parser.fsy"
                 : 'expr));
# 772 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                                     {Pos = pos (fst _1); Node = Ast.IntLiteral (snd _1)} 
                   )
# 144 "Parser.fsy"
                 : 'expr));
# 783 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                                        {Pos = pos (fst _1); Node = Ast.Asn (snd _1)} 
                   )
# 145 "Parser.fsy"
                 : 'expr));
# 794 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                                        {Pos = pos _1; Node = Ast.Wildcard} 
                   )
# 146 "Parser.fsy"
                 : 'expr));
# 805 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                                        {Pos = pos _1; Node = Ast.True} 
                   )
# 147 "Parser.fsy"
                 : 'expr));
# 816 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                                        {Pos = pos _1; Node = Ast.False} 
                   )
# 148 "Parser.fsy"
                 : 'expr));
# 827 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                                     {Pos = range (pos _1) (pos _2); Node = Ast.BlockExpr []} 
                   )
# 149 "Parser.fsy"
                 : 'expr));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstrs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                                     {Pos = range (pos _1) (pos _3); Node = Ast.BlockExpr _2} 
                   )
# 150 "Parser.fsy"
                 : 'expr));
# 852 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ids)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                                     {Pos = range (pos _1) (pos _3); Node = idsToExpr _2 } 
                   )
# 151 "Parser.fsy"
                 : 'expr));
# 865 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                                     [ident _1] 
                   )
# 154 "Parser.fsy"
                 : 'ids));
# 876 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ids)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                                     (ident _1) :: _3 
                   )
# 155 "Parser.fsy"
                 : 'ids));
# 889 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                                        [_1] 
                   )
# 158 "Parser.fsy"
                 : 'definitions));
# 900 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definition)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'definitions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                                        _1 :: _2 
                   )
# 159 "Parser.fsy"
                 : 'definitions));
# 912 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                                       (snd _2, (pos (fst _2), [], _4)) 
                   )
# 162 "Parser.fsy"
                 : 'definition));
# 926 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo * string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ids)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : LineInfo)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                                        (snd _2, (pos (fst _2), _4, _7)) 
                   )
# 163 "Parser.fsy"
                 : 'definition));
|]
# 944 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 33;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.Definitions * Ast.ControlConstraints =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
