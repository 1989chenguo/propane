// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | DOLLAR of (LineInfo)
  | DOT of (LineInfo)
  | ROCKET of (LineInfo)
  | RARROW of (LineInfo)
  | COLON of (LineInfo)
  | SLASH of (LineInfo)
  | COMMA of (LineInfo)
  | RBRACE of (LineInfo)
  | LBRACE of (LineInfo)
  | RBRACKET of (LineInfo)
  | LBRACKET of (LineInfo)
  | RPAREN of (LineInfo)
  | LPAREN of (LineInfo)
  | EQUAL of (LineInfo)
  | CONTROL of (LineInfo)
  | DEFINE of (LineInfo)
  | LOR of (LineInfo)
  | LAND of (LineInfo)
  | OR of (LineInfo)
  | AND of (LineInfo)
  | SHR of (LineInfo)
  | DIFFERENCE of (LineInfo)
  | NOT of (LineInfo)
  | ASN of (LineInfo * int32)
  | INT of (LineInfo * int32)
  | ID of (LineInfo * string)
  | WILDCARD of (LineInfo)
  | FALSE of (LineInfo)
  | TRUE of (LineInfo)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOLLAR
    | TOKEN_DOT
    | TOKEN_ROCKET
    | TOKEN_RARROW
    | TOKEN_COLON
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_RBRACE
    | TOKEN_LBRACE
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_EQUAL
    | TOKEN_CONTROL
    | TOKEN_DEFINE
    | TOKEN_LOR
    | TOKEN_LAND
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_SHR
    | TOKEN_DIFFERENCE
    | TOKEN_NOT
    | TOKEN_ASN
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_WILDCARD
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_control
    | NONTERM_pconstrs
    | NONTERM_pconstr
    | NONTERM_cconstrs
    | NONTERM_cconstr
    | NONTERM_exprs
    | NONTERM_expr
    | NONTERM_ids
    | NONTERM_definitions
    | NONTERM_definition
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Ast.Definitions * Ast.ControlConstraints) 
