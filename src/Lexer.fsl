{
module Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing

exception EofInComment

let inline getAsn (s: string) =
    System.Int32.Parse  s.[2..]

let inline newline (lexbuf: LexBuffer<_>) =
    lexbuf.EndPos <- lexbuf.EndPos.NextLine

let inline position (lexbuf: LexBuffer<_>) =
    (lexbuf.StartPos, lexbuf.EndPos)
}

let digits = ['0'-'9']+ 
let id = ['a'-'z' 'A'-'Z' '_'] ['a'-'z' 'A'-'Z' '0'-'9' '_']*
let comment = "#" [^ '\n']* ['\n' '\r']
let asn = "as" digits

rule tokenize = parse
	| "/*"                  { comments 0 lexbuf } 
	| comment               { newline lexbuf; tokenize lexbuf } 
	| "define"              { DEFINE (position lexbuf) }
	| "not"	                { NOT (position lexbuf) }
	| "and"                 { AND (position lexbuf) }
	| "or"                  { OR (position lexbuf) }
	| "true"                { TRUE (position lexbuf) }
	| "false"               { FALSE (position lexbuf) }
	| "control"             { CONTROL (position lexbuf) }
    | asn                   { ASN (position lexbuf, getAsn (LexBuffer<char>.LexemeString lexbuf)) }
	| id                    { ID (position lexbuf, LexBuffer<char>.LexemeString lexbuf) }
	| digits                { INT (position lexbuf, Int32.Parse (LexBuffer<char>.LexemeString lexbuf)) }
	| '='                   { EQUAL (position lexbuf) }
	| '('                   { LPAREN (position lexbuf) }
	| ')'                   { RPAREN (position lexbuf) }
	| "->"                  { RARROW (position lexbuf) }
	| "=>"                  { ROCKET (position lexbuf) }
	| '['                   { LBRACKET (position lexbuf) }
	| ']'                   { RBRACKET (position lexbuf) }
	| '{'                   { LBRACE (position lexbuf) }
	| '}'                   { RBRACE (position lexbuf) }
	| ','                   { COMMA (position lexbuf) }
	| '/'                   { SLASH (position lexbuf) }
	| '\\'                  { DIFFERENCE (position lexbuf) }
	| '$'                   { DOLLAR (position lexbuf) }
	| ':'                   { COLON (position lexbuf) }
	| '.'                   { DOT (position lexbuf) }
	| ">>"                  { SHR (position lexbuf) } 
	| [' ' '\t' '\r']       { tokenize lexbuf }
	| '\n'                  { newline lexbuf; tokenize lexbuf }
	| eof                   { EOF }

and comments level = parse
	| "*/"                  { if level = 0 then tokenize lexbuf else comments (level-1) lexbuf }
	| "/*"                  { comments (level+1) lexbuf }
	| '\n'                  { newline lexbuf; comments level lexbuf }
	| _	                    { comments level lexbuf }
	| eof                   { raise EofInComment }