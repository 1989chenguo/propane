// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Ast
open Microsoft.FSharp.Collections

exception EmptyFile
exception NoScope
exception NoPathConstraints

let addScope s (ds, ps, cs) = 
    {Name=s;
    Defs=ds;
    PConstraints=ps;
    CConstraints=cs}


# 23 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | UNORDERED
  | ORDERED
  | PATHS
  | SCOPE
  | DEFINE
  | FALSE
  | TRUE
  | OR
  | AND
  | SHR
  | STAR
  | NOT
  | UNION
  | INTERSECT
  | EOF
  | DOT
  | ROCKET
  | RARROW
  | SEMICOLON
  | COLON
  | SLASH
  | COMMA
  | RBRACE
  | LBRACE
  | RBRACKET
  | LBRACKET
  | RPAREN
  | LPAREN
  | EQUAL
  | INT of (System.UInt32)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_UNORDERED
    | TOKEN_ORDERED
    | TOKEN_PATHS
    | TOKEN_SCOPE
    | TOKEN_DEFINE
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_SHR
    | TOKEN_STAR
    | TOKEN_NOT
    | TOKEN_UNION
    | TOKEN_INTERSECT
    | TOKEN_EOF
    | TOKEN_DOT
    | TOKEN_ROCKET
    | TOKEN_RARROW
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_RBRACE
    | TOKEN_LBRACE
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_EQUAL
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_scopes
    | NONTERM_scope
    | NONTERM_cconstrs
    | NONTERM_cconstr
    | NONTERM_exprs
    | NONTERM_expr
    | NONTERM_pconstrs
    | NONTERM_pconstr
    | NONTERM_regexes
    | NONTERM_regex
    | NONTERM_predicate
    | NONTERM_definitions
    | NONTERM_definition

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | UNORDERED  -> 0 
  | ORDERED  -> 1 
  | PATHS  -> 2 
  | SCOPE  -> 3 
  | DEFINE  -> 4 
  | FALSE  -> 5 
  | TRUE  -> 6 
  | OR  -> 7 
  | AND  -> 8 
  | SHR  -> 9 
  | STAR  -> 10 
  | NOT  -> 11 
  | UNION  -> 12 
  | INTERSECT  -> 13 
  | EOF  -> 14 
  | DOT  -> 15 
  | ROCKET  -> 16 
  | RARROW  -> 17 
  | SEMICOLON  -> 18 
  | COLON  -> 19 
  | SLASH  -> 20 
  | COMMA  -> 21 
  | RBRACE  -> 22 
  | LBRACE  -> 23 
  | RBRACKET  -> 24 
  | LBRACKET  -> 25 
  | RPAREN  -> 26 
  | LPAREN  -> 27 
  | EQUAL  -> 28 
  | INT _ -> 29 
  | ID _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_UNORDERED 
  | 1 -> TOKEN_ORDERED 
  | 2 -> TOKEN_PATHS 
  | 3 -> TOKEN_SCOPE 
  | 4 -> TOKEN_DEFINE 
  | 5 -> TOKEN_FALSE 
  | 6 -> TOKEN_TRUE 
  | 7 -> TOKEN_OR 
  | 8 -> TOKEN_AND 
  | 9 -> TOKEN_SHR 
  | 10 -> TOKEN_STAR 
  | 11 -> TOKEN_NOT 
  | 12 -> TOKEN_UNION 
  | 13 -> TOKEN_INTERSECT 
  | 14 -> TOKEN_EOF 
  | 15 -> TOKEN_DOT 
  | 16 -> TOKEN_ROCKET 
  | 17 -> TOKEN_RARROW 
  | 18 -> TOKEN_SEMICOLON 
  | 19 -> TOKEN_COLON 
  | 20 -> TOKEN_SLASH 
  | 21 -> TOKEN_COMMA 
  | 22 -> TOKEN_RBRACE 
  | 23 -> TOKEN_LBRACE 
  | 24 -> TOKEN_RBRACKET 
  | 25 -> TOKEN_LBRACKET 
  | 26 -> TOKEN_RPAREN 
  | 27 -> TOKEN_LPAREN 
  | 28 -> TOKEN_EQUAL 
  | 29 -> TOKEN_INT 
  | 30 -> TOKEN_ID 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_scopes 
    | 3 -> NONTERM_scopes 
    | 4 -> NONTERM_scope 
    | 5 -> NONTERM_scope 
    | 6 -> NONTERM_scope 
    | 7 -> NONTERM_scope 
    | 8 -> NONTERM_cconstrs 
    | 9 -> NONTERM_cconstrs 
    | 10 -> NONTERM_cconstr 
    | 11 -> NONTERM_cconstr 
    | 12 -> NONTERM_exprs 
    | 13 -> NONTERM_exprs 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_pconstrs 
    | 19 -> NONTERM_pconstrs 
    | 20 -> NONTERM_pconstr 
    | 21 -> NONTERM_regexes 
    | 22 -> NONTERM_regexes 
    | 23 -> NONTERM_regex 
    | 24 -> NONTERM_regex 
    | 25 -> NONTERM_regex 
    | 26 -> NONTERM_regex 
    | 27 -> NONTERM_regex 
    | 28 -> NONTERM_regex 
    | 29 -> NONTERM_regex 
    | 30 -> NONTERM_regex 
    | 31 -> NONTERM_regex 
    | 32 -> NONTERM_predicate 
    | 33 -> NONTERM_predicate 
    | 34 -> NONTERM_predicate 
    | 35 -> NONTERM_predicate 
    | 36 -> NONTERM_predicate 
    | 37 -> NONTERM_predicate 
    | 38 -> NONTERM_predicate 
    | 39 -> NONTERM_predicate 
    | 40 -> NONTERM_definitions 
    | 41 -> NONTERM_definitions 
    | 42 -> NONTERM_definition 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | UNORDERED  -> "UNORDERED" 
  | ORDERED  -> "ORDERED" 
  | PATHS  -> "PATHS" 
  | SCOPE  -> "SCOPE" 
  | DEFINE  -> "DEFINE" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | SHR  -> "SHR" 
  | STAR  -> "STAR" 
  | NOT  -> "NOT" 
  | UNION  -> "UNION" 
  | INTERSECT  -> "INTERSECT" 
  | EOF  -> "EOF" 
  | DOT  -> "DOT" 
  | ROCKET  -> "ROCKET" 
  | RARROW  -> "RARROW" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | RBRACE  -> "RBRACE" 
  | LBRACE  -> "LBRACE" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACKET  -> "LBRACKET" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | EQUAL  -> "EQUAL" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | UNORDERED  -> (null : System.Object) 
  | ORDERED  -> (null : System.Object) 
  | PATHS  -> (null : System.Object) 
  | SCOPE  -> (null : System.Object) 
  | DEFINE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | SHR  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | UNION  -> (null : System.Object) 
  | INTERSECT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | ROCKET  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 8us; 9us; 1us; 65535us; 6us; 7us; 3us; 65535us; 10us; 11us; 13us; 14us; 15us; 16us; 3us; 65535us; 10us; 15us; 13us; 15us; 15us; 15us; 2us; 65535us; 18us; 19us; 22us; 23us; 2us; 65535us; 18us; 21us; 22us; 21us; 3us; 65535us; 6us; 10us; 12us; 13us; 30us; 31us; 3us; 65535us; 6us; 30us; 12us; 30us; 30us; 30us; 3us; 65535us; 33us; 34us; 36us; 37us; 39us; 40us; 13us; 65535us; 18us; 27us; 22us; 27us; 28us; 29us; 33us; 35us; 36us; 35us; 39us; 35us; 49us; 44us; 50us; 45us; 51us; 46us; 52us; 47us; 53us; 47us; 55us; 48us; 56us; 48us; 11us; 65535us; 6us; 32us; 12us; 32us; 18us; 26us; 22us; 26us; 30us; 32us; 53us; 71us; 56us; 72us; 73us; 69us; 74us; 70us; 75us; 71us; 76us; 72us; 2us; 65535us; 6us; 12us; 78us; 79us; 2us; 65535us; 6us; 78us; 78us; 78us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 8us; 12us; 16us; 19us; 22us; 26us; 30us; 34us; 48us; 60us; 63us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 2us; 2us; 3us; 2us; 2us; 3us; 2us; 2us; 3us; 2us; 2us; 3us; 1us; 3us; 2us; 4us; 5us; 1us; 5us; 2us; 6us; 7us; 2us; 6us; 7us; 1us; 7us; 2us; 8us; 9us; 1us; 9us; 2us; 10us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 2us; 12us; 13us; 1us; 13us; 1us; 13us; 3us; 14us; 23us; 24us; 3us; 15us; 32us; 33us; 3us; 16us; 36us; 37us; 5us; 17us; 26us; 27us; 28us; 30us; 1us; 17us; 5us; 17us; 26us; 27us; 28us; 30us; 2us; 18us; 19us; 1us; 19us; 3us; 20us; 36us; 37us; 1us; 20us; 1us; 20us; 6us; 21us; 22us; 26us; 27us; 28us; 30us; 1us; 22us; 1us; 22us; 2us; 23us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 5us; 26us; 26us; 27us; 28us; 30us; 5us; 26us; 27us; 27us; 28us; 30us; 5us; 26us; 27us; 28us; 28us; 30us; 5us; 26us; 27us; 28us; 29us; 30us; 5us; 26us; 27us; 28us; 30us; 31us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 2us; 29us; 38us; 1us; 30us; 1us; 31us; 2us; 31us; 39us; 1us; 31us; 2us; 32us; 33us; 2us; 32us; 33us; 2us; 32us; 33us; 2us; 32us; 33us; 2us; 32us; 33us; 2us; 32us; 33us; 2us; 32us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 35us; 3us; 36us; 36us; 37us; 3us; 36us; 37us; 37us; 3us; 36us; 37us; 38us; 3us; 36us; 37us; 39us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 39us; 2us; 40us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 14us; 17us; 20us; 23us; 25us; 28us; 30us; 33us; 36us; 38us; 41us; 43us; 46us; 48us; 50us; 52us; 55us; 57us; 59us; 63us; 67us; 71us; 77us; 79us; 85us; 88us; 90us; 94us; 96us; 98us; 105us; 107us; 109us; 112us; 114us; 116us; 118us; 120us; 122us; 128us; 134us; 140us; 146us; 152us; 154us; 156us; 158us; 160us; 163us; 165us; 167us; 170us; 172us; 175us; 178us; 181us; 184us; 187us; 190us; 193us; 195us; 197us; 199us; 201us; 205us; 209us; 213us; 217us; 219us; 221us; 223us; 225us; 227us; 230us; 232us; 234us; |]
let _fsyacc_action_rows = 82
let _fsyacc_actionTableElements = [|1us; 32768us; 3us; 4us; 0us; 49152us; 1us; 32768us; 14us; 3us; 0us; 16385us; 1us; 32768us; 30us; 5us; 1us; 32768us; 23us; 6us; 6us; 32768us; 4us; 80us; 5us; 68us; 6us; 67us; 11us; 75us; 27us; 76us; 29us; 58us; 1us; 32768us; 22us; 8us; 1us; 16386us; 3us; 4us; 0us; 16387us; 1us; 16388us; 30us; 17us; 0us; 16389us; 5us; 32768us; 5us; 68us; 6us; 67us; 11us; 75us; 27us; 76us; 29us; 58us; 1us; 16390us; 30us; 17us; 0us; 16391us; 1us; 16392us; 30us; 17us; 0us; 16393us; 1us; 16394us; 27us; 18us; 7us; 32768us; 5us; 68us; 6us; 67us; 11us; 53us; 25us; 42us; 27us; 56us; 29us; 25us; 30us; 24us; 1us; 32768us; 26us; 20us; 0us; 16395us; 1us; 16396us; 21us; 22us; 7us; 32768us; 5us; 68us; 6us; 67us; 11us; 53us; 25us; 42us; 27us; 56us; 29us; 25us; 30us; 24us; 0us; 16397us; 6us; 16398us; 10us; 16407us; 12us; 16407us; 13us; 16407us; 17us; 16407us; 18us; 16407us; 27us; 39us; 1us; 16399us; 15us; 59us; 2us; 16400us; 7us; 73us; 8us; 74us; 5us; 32768us; 10us; 54us; 12us; 51us; 13us; 50us; 17us; 28us; 18us; 49us; 4us; 32768us; 11us; 52us; 25us; 42us; 27us; 55us; 30us; 38us; 4us; 16401us; 10us; 54us; 12us; 51us; 13us; 50us; 18us; 49us; 5us; 16402us; 5us; 68us; 6us; 67us; 11us; 75us; 27us; 76us; 29us; 58us; 0us; 16403us; 3us; 32768us; 7us; 73us; 8us; 74us; 16us; 33us; 4us; 32768us; 11us; 52us; 25us; 42us; 27us; 55us; 30us; 38us; 0us; 16404us; 5us; 16405us; 9us; 36us; 10us; 54us; 12us; 51us; 13us; 50us; 18us; 49us; 4us; 32768us; 11us; 52us; 25us; 42us; 27us; 55us; 30us; 38us; 0us; 16406us; 1us; 16407us; 27us; 39us; 4us; 32768us; 11us; 52us; 25us; 42us; 27us; 55us; 30us; 38us; 1us; 32768us; 26us; 41us; 0us; 16408us; 1us; 32768us; 24us; 43us; 0us; 16409us; 1us; 16410us; 10us; 54us; 2us; 16411us; 10us; 54us; 18us; 49us; 2us; 16412us; 10us; 54us; 18us; 49us; 1us; 16413us; 10us; 54us; 5us; 32768us; 10us; 54us; 12us; 51us; 13us; 50us; 18us; 49us; 26us; 57us; 4us; 32768us; 11us; 52us; 25us; 42us; 27us; 55us; 30us; 38us; 4us; 32768us; 11us; 52us; 25us; 42us; 27us; 55us; 30us; 38us; 4us; 32768us; 11us; 52us; 25us; 42us; 27us; 55us; 30us; 38us; 4us; 32768us; 11us; 52us; 25us; 42us; 27us; 55us; 30us; 38us; 7us; 32768us; 5us; 68us; 6us; 67us; 11us; 53us; 25us; 42us; 27us; 56us; 29us; 58us; 30us; 38us; 0us; 16414us; 4us; 32768us; 11us; 52us; 25us; 42us; 27us; 55us; 30us; 38us; 7us; 32768us; 5us; 68us; 6us; 67us; 11us; 53us; 25us; 42us; 27us; 56us; 29us; 58us; 30us; 38us; 0us; 16415us; 1us; 32768us; 15us; 59us; 1us; 32768us; 29us; 60us; 1us; 32768us; 15us; 61us; 1us; 32768us; 29us; 62us; 1us; 32768us; 15us; 63us; 1us; 32768us; 29us; 64us; 1us; 16416us; 20us; 65us; 1us; 32768us; 29us; 66us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 3us; 32768us; 7us; 73us; 8us; 74us; 26us; 77us; 5us; 32768us; 5us; 68us; 6us; 67us; 11us; 75us; 27us; 76us; 29us; 58us; 5us; 32768us; 5us; 68us; 6us; 67us; 11us; 75us; 27us; 76us; 29us; 58us; 5us; 32768us; 5us; 68us; 6us; 67us; 11us; 75us; 27us; 76us; 29us; 58us; 5us; 32768us; 5us; 68us; 6us; 67us; 11us; 75us; 27us; 76us; 29us; 58us; 0us; 16423us; 1us; 16424us; 4us; 80us; 0us; 16425us; 1us; 32768us; 30us; 81us; 0us; 16426us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 8us; 10us; 17us; 19us; 21us; 22us; 24us; 25us; 31us; 33us; 34us; 36us; 37us; 39us; 47us; 49us; 50us; 52us; 60us; 61us; 68us; 70us; 73us; 79us; 84us; 89us; 95us; 96us; 100us; 105us; 106us; 112us; 117us; 118us; 120us; 125us; 127us; 128us; 130us; 131us; 133us; 136us; 139us; 141us; 147us; 152us; 157us; 162us; 167us; 175us; 176us; 181us; 189us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 207us; 208us; 209us; 210us; 211us; 212us; 216us; 222us; 228us; 234us; 240us; 241us; 243us; 244us; 246us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 5us; 6us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 4us; 1us; 3us; 1us; 1us; 1us; 3us; 1us; 2us; 3us; 1us; 3us; 1us; 4us; 2us; 3us; 3us; 3us; 2us; 2us; 3us; 7us; 9us; 1us; 1us; 3us; 3us; 2us; 3us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 14us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 16389us; 65535us; 65535us; 16391us; 65535us; 16393us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 16408us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 16418us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 16425us; 65535us; 16426us; |]
let _fsyacc_reductions ()  =    [| 
# 314 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.T)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 323 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'scopes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                           _1 
                   )
# 67 "Parser.fsy"
                 : Ast.T));
# 334 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'scope)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                         [addScope _2 _4] 
                   )
# 70 "Parser.fsy"
                 : 'scopes));
# 346 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'scope)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'scopes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                              (addScope _2 _4) :: _6 
                   )
# 71 "Parser.fsy"
                 : 'scopes));
# 359 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                          ([], _1, []) 
                   )
# 74 "Parser.fsy"
                 : 'scope));
# 370 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstrs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                 ([], _1, _2) 
                   )
# 75 "Parser.fsy"
                 : 'scope));
# 382 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definitions)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                   (_1, _2, []) 
                   )
# 76 "Parser.fsy"
                 : 'scope));
# 394 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definitions)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstrs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                          (_1, _2, _3) 
                   )
# 77 "Parser.fsy"
                 : 'scope));
# 407 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                         [_1] 
                   )
# 80 "Parser.fsy"
                 : 'cconstrs));
# 418 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cconstrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                _1 :: _2 
                   )
# 81 "Parser.fsy"
                 : 'cconstrs));
# 430 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                     (_1, []) 
                   )
# 84 "Parser.fsy"
                 : 'cconstr));
# 441 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                    (_1, _3) 
                   )
# 85 "Parser.fsy"
                 : 'cconstr));
# 453 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                       [_1] 
                   )
# 88 "Parser.fsy"
                 : 'exprs));
# 464 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                _1 :: _3 
                   )
# 89 "Parser.fsy"
                 : 'exprs));
# 476 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                        Ast.IdentExpr _1 
                   )
# 92 "Parser.fsy"
                 : 'expr));
# 487 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                         Ast.IntLiteral _1 
                   )
# 93 "Parser.fsy"
                 : 'expr));
# 498 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                              Ast.PredicateExpr _1 
                   )
# 94 "Parser.fsy"
                 : 'expr));
# 509 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                    Ast.LinkExpr (_1, _3) 
                   )
# 95 "Parser.fsy"
                 : 'expr));
# 521 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                         [_1] 
                   )
# 98 "Parser.fsy"
                 : 'pconstrs));
# 532 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'pconstrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                _1 :: _2 
                   )
# 99 "Parser.fsy"
                 : 'pconstrs));
# 544 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                      (_1, _3) 
                   )
# 102 "Parser.fsy"
                 : 'pconstr));
# 556 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                        [_1] 
                   )
# 105 "Parser.fsy"
                 : 'regexes));
# 567 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                 _1 :: _3 
                   )
# 106 "Parser.fsy"
                 : 'regexes));
# 579 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                     Ast.Ident (_1, []) 
                   )
# 109 "Parser.fsy"
                 : 'regex));
# 590 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                      Ast.Ident (_1, _3) 
                   )
# 110 "Parser.fsy"
                 : 'regex));
# 602 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                 Ast.Empty 
                   )
# 111 "Parser.fsy"
                 : 'regex));
# 612 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                    Ast.Concat (_1, _3) 
                   )
# 112 "Parser.fsy"
                 : 'regex));
# 624 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                    Ast.Inter (_1, _3) 
                   )
# 113 "Parser.fsy"
                 : 'regex));
# 636 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                 Ast.Union (_1, _3) 
                   )
# 114 "Parser.fsy"
                 : 'regex));
# 648 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                           Ast.Negate _2 
                   )
# 115 "Parser.fsy"
                 : 'regex));
# 659 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                           Ast.Star _1 
                   )
# 116 "Parser.fsy"
                 : 'regex));
# 670 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'regex)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                  _2 
                   )
# 117 "Parser.fsy"
                 : 'regex));
# 681 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                        Ast.Prefix(_1, _3, _5, _7, None) 
                   )
# 120 "Parser.fsy"
                 : 'predicate));
# 695 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : System.UInt32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                Ast.Prefix(_1, _3, _5, _7, Some _9) 
                   )
# 121 "Parser.fsy"
                 : 'predicate));
# 710 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                       Ast.True 
                   )
# 122 "Parser.fsy"
                 : 'predicate));
# 720 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                        Ast.False 
                   )
# 123 "Parser.fsy"
                 : 'predicate));
# 730 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                    Ast.Or(_1, _3) 
                   )
# 124 "Parser.fsy"
                 : 'predicate));
# 742 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                     Ast.And(_1, _3) 
                   )
# 125 "Parser.fsy"
                 : 'predicate));
# 754 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                              Ast.Not _2 
                   )
# 126 "Parser.fsy"
                 : 'predicate));
# 765 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                     _2 
                   )
# 127 "Parser.fsy"
                 : 'predicate));
# 776 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                           [_1] 
                   )
# 130 "Parser.fsy"
                 : 'definitions));
# 787 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definition)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'definitions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                    _1 :: _2 
                   )
# 131 "Parser.fsy"
                 : 'definitions));
# 799 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                           _2 
                   )
# 134 "Parser.fsy"
                 : 'definition));
|]
# 811 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.T =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
