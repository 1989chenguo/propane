// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Ast
open Microsoft.FSharp.Collections

# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | DEFINE
  | SCOPE
  | PATHS
  | ORDERED
  | UNORDERED
  | AGGREGATE
  | COMMUNITY
  | MAXROUTES
  | MULTIPATH
  | INCLUDE
  | EQUAL
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | COMMA
  | SLASH
  | COLON
  | RARROW
  | EOF
  | INT of (System.Int32)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_DEFINE
    | TOKEN_SCOPE
    | TOKEN_PATHS
    | TOKEN_ORDERED
    | TOKEN_UNORDERED
    | TOKEN_AGGREGATE
    | TOKEN_COMMUNITY
    | TOKEN_MAXROUTES
    | TOKEN_MULTIPATH
    | TOKEN_INCLUDE
    | TOKEN_EQUAL
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_COMMA
    | TOKEN_SLASH
    | TOKEN_COLON
    | TOKEN_RARROW
    | TOKEN_EOF
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_constrs
    | NONTERM_constr
    | NONTERM_definitions
    | NONTERM_definition

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | DEFINE  -> 0 
  | SCOPE  -> 1 
  | PATHS  -> 2 
  | ORDERED  -> 3 
  | UNORDERED  -> 4 
  | AGGREGATE  -> 5 
  | COMMUNITY  -> 6 
  | MAXROUTES  -> 7 
  | MULTIPATH  -> 8 
  | INCLUDE  -> 9 
  | EQUAL  -> 10 
  | LPAREN  -> 11 
  | RPAREN  -> 12 
  | LBRACKET  -> 13 
  | RBRACKET  -> 14 
  | LBRACE  -> 15 
  | RBRACE  -> 16 
  | COMMA  -> 17 
  | SLASH  -> 18 
  | COLON  -> 19 
  | RARROW  -> 20 
  | EOF  -> 21 
  | INT _ -> 22 
  | ID _ -> 23 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_DEFINE 
  | 1 -> TOKEN_SCOPE 
  | 2 -> TOKEN_PATHS 
  | 3 -> TOKEN_ORDERED 
  | 4 -> TOKEN_UNORDERED 
  | 5 -> TOKEN_AGGREGATE 
  | 6 -> TOKEN_COMMUNITY 
  | 7 -> TOKEN_MAXROUTES 
  | 8 -> TOKEN_MULTIPATH 
  | 9 -> TOKEN_INCLUDE 
  | 10 -> TOKEN_EQUAL 
  | 11 -> TOKEN_LPAREN 
  | 12 -> TOKEN_RPAREN 
  | 13 -> TOKEN_LBRACKET 
  | 14 -> TOKEN_RBRACKET 
  | 15 -> TOKEN_LBRACE 
  | 16 -> TOKEN_RBRACE 
  | 17 -> TOKEN_COMMA 
  | 18 -> TOKEN_SLASH 
  | 19 -> TOKEN_COLON 
  | 20 -> TOKEN_RARROW 
  | 21 -> TOKEN_EOF 
  | 22 -> TOKEN_INT 
  | 23 -> TOKEN_ID 
  | 26 -> TOKEN_end_of_input
  | 24 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_constrs 
    | 4 -> NONTERM_constrs 
    | 5 -> NONTERM_constr 
    | 6 -> NONTERM_constr 
    | 7 -> NONTERM_definitions 
    | 8 -> NONTERM_definitions 
    | 9 -> NONTERM_definition 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 26 
let _fsyacc_tagOfErrorTerminal = 24

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | DEFINE  -> "DEFINE" 
  | SCOPE  -> "SCOPE" 
  | PATHS  -> "PATHS" 
  | ORDERED  -> "ORDERED" 
  | UNORDERED  -> "UNORDERED" 
  | AGGREGATE  -> "AGGREGATE" 
  | COMMUNITY  -> "COMMUNITY" 
  | MAXROUTES  -> "MAXROUTES" 
  | MULTIPATH  -> "MULTIPATH" 
  | INCLUDE  -> "INCLUDE" 
  | EQUAL  -> "EQUAL" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | COMMA  -> "COMMA" 
  | SLASH  -> "SLASH" 
  | COLON  -> "COLON" 
  | RARROW  -> "RARROW" 
  | EOF  -> "EOF" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | DEFINE  -> (null : System.Object) 
  | SCOPE  -> (null : System.Object) 
  | PATHS  -> (null : System.Object) 
  | ORDERED  -> (null : System.Object) 
  | UNORDERED  -> (null : System.Object) 
  | AGGREGATE  -> (null : System.Object) 
  | COMMUNITY  -> (null : System.Object) 
  | MAXROUTES  -> (null : System.Object) 
  | MULTIPATH  -> (null : System.Object) 
  | INCLUDE  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 4us; 5us; 7us; 8us; 3us; 65535us; 0us; 7us; 4us; 7us; 7us; 7us; 2us; 65535us; 0us; 4us; 14us; 15us; 2us; 65535us; 0us; 14us; 14us; 14us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 14us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 7us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 32us; 34us; 36us; |]
let _fsyacc_action_rows = 18
let _fsyacc_actionTableElements = [|3us; 32768us; 0us; 16us; 7us; 10us; 8us; 9us; 0us; 49152us; 1us; 32768us; 21us; 3us; 0us; 16385us; 2us; 32768us; 7us; 10us; 8us; 9us; 1us; 32768us; 21us; 6us; 0us; 16386us; 2us; 16387us; 7us; 10us; 8us; 9us; 0us; 16388us; 0us; 16389us; 1us; 32768us; 11us; 11us; 1us; 32768us; 22us; 12us; 1us; 32768us; 12us; 13us; 0us; 16390us; 1us; 16391us; 0us; 16us; 0us; 16392us; 1us; 32768us; 23us; 17us; 0us; 16393us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 11us; 13us; 14us; 17us; 18us; 19us; 21us; 23us; 25us; 26us; 28us; 29us; 31us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 1us; 2us; 1us; 4us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 16386us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16390us; 65535us; 16392us; 65535us; 16393us; |]
let _fsyacc_reductions ()  =    [| 
# 219 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.T)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 228 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "Parser.fsy"
                                           {Defs=[]; PConstraints=[]; CConstraints=(List.rev _1)} 
                   )
# 19 "Parser.fsy"
                 : Ast.T));
# 239 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definitions)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'constrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                                    {Defs=(List.rev _1); PConstraints=[]; CConstraints=(List.rev _2)} 
                   )
# 20 "Parser.fsy"
                 : Ast.T));
# 251 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "Parser.fsy"
                                       [_1] 
                   )
# 23 "Parser.fsy"
                 : 'constrs));
# 262 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'constrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                             _1 :: _2 
                   )
# 24 "Parser.fsy"
                 : 'constrs));
# 274 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                          Ast.Multipath 
                   )
# 27 "Parser.fsy"
                 : 'constr));
# 284 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                                       Ast.MaxRoutes _3 
                   )
# 28 "Parser.fsy"
                 : 'constr));
# 295 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                          [_1] 
                   )
# 31 "Parser.fsy"
                 : 'definitions));
# 306 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'definition)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'definitions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                   _1 :: _2 
                   )
# 32 "Parser.fsy"
                 : 'definitions));
# 318 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                          _2 
                   )
# 35 "Parser.fsy"
                 : 'definition));
|]
# 330 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 27;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.T =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
