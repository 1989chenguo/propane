// Signature file for parser generated by fsyacc
module Parser
type token = 
  | DEFINE
  | SCOPE
  | OWNS
  | PATHS
  | ORDERED
  | UNORDERED
  | AGGREGATE
  | COMMUNITY
  | MAXROUTES
  | MULTIPATH
  | INCLUDE
  | INTERSECT
  | UNION
  | NOT
  | STAR
  | SHR
  | AND
  | OR
  | TRUE
  | FALSE
  | EQUAL
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | COMMA
  | SLASH
  | COLON
  | SEMICOLON
  | RARROW
  | ROCKET
  | DOT
  | EOF
  | INT of (System.Int32)
  | ID of (string)
type tokenId = 
    | TOKEN_DEFINE
    | TOKEN_SCOPE
    | TOKEN_OWNS
    | TOKEN_PATHS
    | TOKEN_ORDERED
    | TOKEN_UNORDERED
    | TOKEN_AGGREGATE
    | TOKEN_COMMUNITY
    | TOKEN_MAXROUTES
    | TOKEN_MULTIPATH
    | TOKEN_INCLUDE
    | TOKEN_INTERSECT
    | TOKEN_UNION
    | TOKEN_NOT
    | TOKEN_STAR
    | TOKEN_SHR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_EQUAL
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_COMMA
    | TOKEN_SLASH
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_RARROW
    | TOKEN_ROCKET
    | TOKEN_DOT
    | TOKEN_EOF
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_scope
    | NONTERM_cconstrs
    | NONTERM_cconstr
    | NONTERM_pconstrs
    | NONTERM_pconstr
    | NONTERM_regexs
    | NONTERM_regex
    | NONTERM_predicate
    | NONTERM_definitions
    | NONTERM_definition
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Ast.T) 
